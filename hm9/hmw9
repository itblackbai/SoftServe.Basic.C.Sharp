using System;
using System.Collections.Generic;

namespace net9
{
    public struct Point
    {
        public int x, y;

        public Point (int x,int y)
        {
            this.x = x;
            this.y = x;
        }

        public override string ToString()
        {
            return $"Point x = {x}, Point y = {y}" ;
        }
    }

    public class Triangle
    {
        private Point Vertex1, Vertex2, Vertex3;

        public Triangle(Point a, Point b, Point c)
        {
            this.Vertex1 = a;
            this.Vertex2 = b;
            this.Vertex3 = c;
        }

        public double Distance(Point point1,Point point2)
        {
            double result_d = Math.Sqrt(Math.Pow((point2.x - point1.x), 2) +
                Math.Pow((point2.y - point1.y), 2));
            return Math.Round(result_d, 3);
        }

        public double Perimeter()
        {
            double result_p = Math.Round(Distance(Vertex1, Vertex2) +
                Distance(Vertex3, Vertex1) + Distance(Vertex2, Vertex3), 2);
            return result_p;
        }

        public double Square()
        {
            double result_s = Math.Round(Math.Sqrt(Perimeter() * (Perimeter() - Distance(Vertex1, Vertex2)) *
            (Perimeter() - Distance(Vertex2, Vertex3)) *
            (Perimeter() - Distance(Vertex3, Vertex1))), 2);
            return result_s;
        }

        public void Print()
        {
            Console.WriteLine($"Tringle sides {Distance(Vertex1, Vertex2)}, :::" +
                $" {Distance(Vertex2, Vertex3)}, {Distance(Vertex3, Vertex1)} " +
                $"Perimeter {Perimeter()}, Square {Square()}");
        }

    }

    class Program
    {
        static void Main(string[] args)
        {
            //Print the triangle with vertex which is the closest to origin (0,0)

            List<Triangle> triagles = new List<Triangle>();

            Point point1 = new Point(1, 9);
            Point point2 = new Point(2, 8);
            Point point3 = new Point(3, 7);
            Point point4 = new Point(4, 6);
            Point point5 = new Point(5, 5);
            Point point6 = new Point(6, 4);
            Point point7 = new Point(7, 3);
            Point point8 = new Point(8, 2);
            Point point9 = new Point(9, 1);
            Point zeropoint = new Point(0, 0);

            Triangle triangle1 = new Triangle(point1, point2, point3);
            Triangle triangle2 = new Triangle(point3, point4, point6);
            Triangle triangle3 = new Triangle(point7, point8, point9);

            triagles.Add(triangle1);
            triagles.Add(triangle2);
            triagles.Add(triangle3);


            foreach (Triangle triangle in triagles)
            {
                
                triangle.Print();
            }
            Console.ReadLine();
        }
    }
}
